{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","reviews","getReviews","_this2","fetch","then","results","json","setState","react_default","a","createElement","className","reactstrap_es","fluid","md","map","review","index","App_ReviewItem","key","React","Component","ReviewItem","_ref","left","href","src","image_url","body","review_title","username","product","user_review","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"iRAOMA,qBAEJ,SAAAA,IAAc,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAJ,IACZC,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAF,GAAAO,KAAAH,QAEKI,MAAQ,CACXC,QAAW,IAJDR,mFAQZG,KAAKM,kDAGM,IAAAC,EAAAP,KACXQ,MAAM,kCACLC,KAAK,SAAAC,GAAO,OAAIA,EAAQC,SACxBF,KAAK,SAAAC,GAAO,OAAIH,EAAKK,SAAS,CAACP,QAAWK,uCAG3C,OAEEG,EAAAC,EAAAC,cAAA,OAAKC,UAAU,QACfH,EAAAC,EAAAC,cAACE,EAAA,EAAD,CAAWC,OAAK,EAACF,UAAU,cACzBH,EAAAC,EAAAC,cAACE,EAAA,EAAD,CAAWC,OAAK,GAChBL,EAAAC,EAAAC,cAACE,EAAA,EAAD,CAAKE,GAAG,KACNN,EAAAC,EAAAC,cAAA,MAAIC,UAAU,aAAd,wBACAH,EAAAC,EAAAC,cAAA,KAAGC,UAAU,QAAb,qFAKJH,EAAAC,EAAAC,cAAA,UACCf,KAAKI,MAAMC,QAAQe,IAAI,SAASC,EAAQC,GACvC,OAAOT,EAAAC,EAAAC,cAACQ,EAAD,CAAYF,OAAQA,EAAQG,IAAKF,eAjC9BG,IAAMC,YA0ClBC,EAAa,SAAAC,GAAA,IAAGP,EAAHO,EAAGP,OAAH,OAEjBR,EAAAC,EAAAC,cAAA,OAAKC,UAAU,cAEdH,EAAAC,EAAAC,cAACE,EAAA,EAAD,CAAOD,UAAU,gBACdH,EAAAC,EAAAC,cAACE,EAAA,EAAD,CAAOY,MAAI,EAACC,KAAK,KACfjB,EAAAC,EAAAC,cAACE,EAAA,EAAD,CAAOc,IAAKV,EAAOW,aAErBnB,EAAAC,EAAAC,cAACE,EAAA,EAAD,CAAOgB,MAAI,EAACjB,UAAU,cAEpBH,EAAAC,EAAAC,cAAA,UAAKM,EAAOa,cAEZrB,EAAAC,EAAAC,cAAA,mBAAWM,EAAOc,UAElBtB,EAAAC,EAAAC,cAAA,sBAAcM,EAAOe,SAErBvB,EAAAC,EAAAC,cAAA,aAAKM,EAAOgB,YAAZ,SAMOzC,IC7DK0C,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCRNC,IAASC,OAAO/B,EAAAC,EAAAC,cAAC8B,EAAD,MAASC,SAASC,eAAe,SDiH3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMzC,KAAK,SAAA0C,GACjCA,EAAaC","file":"static/js/main.a0c07561.chunk.js","sourcesContent":["import React from \"react\";\nimport 'bootstrap/dist/css/bootstrap.css';\nimport {\n   Jumbotron, Container, Col,  Media \n} from \"reactstrap\";\nimport './App.css';\n\nclass App extends React.Component {\n  \n  constructor() {\n    super();\n\n    this.state = {\n      'reviews': []\n    }\n  }\n  componentDidMount() {\n    this.getReviews();\n  }\n\n  getReviews() {\n    fetch('http://127.0.0.1:8000/reviews/') \n    .then(results => results.json())\n    .then(results => this.setState({'reviews': results}));\n  }\n  render() {\n    return (\n\n      <div className=\"wrap\">\n      <Jumbotron fluid className=\"top-header\">\n        <Container fluid>\n        <Col md=\"5\">\n          <h1 className=\"display-5\">Tech Product Reviews</h1>\n          <p className=\"lead\">Custom created Django REST APIs retrieved and rendered on the React Front-End.</p>\n          </Col>\n        </Container>\n      </Jumbotron>\n\n      <ul>\n      {this.state.reviews.map(function(review, index) {\n        return <ReviewItem review={review} key={index} />\n      })}\n    </ul>\n\n     </div>\n    );\n  }\n}\n\nconst ReviewItem = ({ review }) => (\n\n  <div className=\"ReviewItem\">\n\n   <Media className=\"review-block\">\n      <Media left href=\"#\">\n        <Media src={review.image_url} />\n      </Media>\n      <Media body className=\"right-text\">\n\n        <h4>{review.review_title}</h4>\n\n        <h6>User: {review.username}</h6>\n\n        <h6>Product: {review.product}</h6>\n\n        <p>\"{review.user_review}\"</p>\n      </Media>\n    </Media>\n  </div>\n)\n\nexport default App;\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n\n              // Execute callback\n              if (config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\n\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}